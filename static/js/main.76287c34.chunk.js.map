{"version":3,"sources":["api/PredictionResponse.ts","api/FetchProxy.ts","api/BusTrackerApi.ts","api/TrainApi.ts","components/BusArrivalRow.tsx","components/Arrivals.tsx","api/WeatherResponse.ts","api/WeatherApi.ts","components/Weather.tsx","components/Dashboard.tsx","App.js","serviceWorker.js","index.js"],"names":["PredictionLine","PredictionResponse","stopName","destination","line","prediction","Object","classCallCheck","this","StopName","Destination","Line","Prediction","FetchProxy","url","fetch","credentials","headers","accept","accept-language","cache-control","pragma","sec-fetch-mode","sec-fetch-site","referrerPolicy","body","method","mode","BusTrackerApi","busStopIds","Promise","resolve","idsString","join","concat","fetchViaProxy","then","response","json","Array","forEach","push","Bus","parseInt","TrainApi","trainStopIds","mins","Date","parse","Unknown","Purple","Brown","Red","BusArrivalRow","props","predictionResponse","react_default","a","createElement","className","style","background","getcolor","Component","Arrivals","_this","possibleConstructorReturn","getPrototypeOf","call","timer","state","isFetching","predictionResponses","allResponseData","responseData","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","entries","Symbol","iterator","next","done","_ref","value","_ref2","slicedToArray","idx","BusArrivalRow_BusArrivalRow","key","err","return","allRespIdx","dataIndex","length","_this2","fetchData","setInterval","setState","objectSpread","all","getPredictions","resp","allData","sort","b","_this3","catch","reason","console","log","WeatherResponse","forecasts","Forecasts","Forecast","timePeriodName","temperature","shortForecast","detailedForecast","iconUrl","TimePeriodName","Temperature","DetailedForecast","ShortForecast","IconUrl","WeatherApi","lotXValue","lotYValue","period","forecast","Number","parseFloat","Weather","getWeather","Dashboard","transitionStates","arrivalsDataIndex","transitionState","startsWith","Arrivals_Arrivals","Weather_Weather","newState","split","update","App","Dashboard_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76287c34.chunk.js","sourcesContent":["export default class PredictionResponse {\n    StopName: string;\n    Destination: string;\n    Line: PredictionLine;\n    Prediction: number | null;\n\n    constructor(stopName: string, destination: string, line: PredictionLine, prediction: number | null) {\n        this.StopName = stopName;\n        this.Destination = destination;\n        this.Line = line;\n        this.Prediction = prediction;\n    }\n}\n\n\nexport enum PredictionLine {\n    Unknown,\n    Purple,\n    Brown,\n    Red,\n    SeventyFour,\n    Bus\n}","export default class FetchProxy {\n    static fetchViaProxy(url: string): Promise<Response> {\n        return fetch('https://blooming-chamber-35209.herokuapp.com/' + url,\n            {\"credentials\": \"omit\",\n            \"headers\":\n                {\"accept\": \"*/*\",\n                 \"accept-language\": \"en-US,en;q=0.9\",\n                 \"cache-control\": \"no-cache\",\n                 \"pragma\":\"no-cache\",\n                 \"sec-fetch-mode\":\"cors\",\n                 \"sec-fetch-site\":\"cross-site\"},\n            \"referrerPolicy\":\"no-referrer-when-downgrade\",\n            \"body\":null,\n            \"method\":\"GET\",\n            \"mode\":\"cors\"});\n    }\n}\n","import PredictionResponse, { PredictionLine } from './PredictionResponse';\nimport FetchProxy from './FetchProxy';\n\nexport default class BusTrackerApi {\n    public static getPredictions(busStopIds: Array<number>) : Promise<Array<PredictionResponse>> {\n        return new Promise(resolve => {\n            let idsString: string = busStopIds.join(',');\n            let url: string = `http://www.ctabustracker.com/bustime/api/v2/getpredictions?key=nGRcA3p5MLFbSUrbDbtuKiiik&format=json&stpid=${idsString}`;\n            FetchProxy.fetchViaProxy(url)\n            .then(response => response.json())\n            .then(body => {\n                let response: Array<PredictionResponse> = new Array<PredictionResponse>();\n                body['bustime-response']['prd'].forEach((prediction: { [x: string]: string; }) => {\n                    response.push(new PredictionResponse(prediction['stpnm'], prediction['des'],\n                        PredictionLine.Bus, prediction['prdctdn'] !== 'DUE' ? parseInt(prediction['prdctdn']) : null))\n                });\n                resolve(response);\n            })\n        });\n    }\n}","import PredictionResponse, { PredictionLine } from './PredictionResponse';\nimport FetchProxy from './FetchProxy';\n\nexport default class TrainApi {\n    public static getPredictions(trainStopIds: Array<number>) : Promise<Array<PredictionResponse>> {\n        return new Promise(resolve => {\n            let idsString: string = trainStopIds.join(',');\n            let url: string = `https://lapi.transitchicago.com/api/1.0/ttarrivals.aspx?key=46c79bfa6f474db4a8d82638fc4584a7&outputType=JSON&stpid=${idsString}`;\n            FetchProxy.fetchViaProxy(url)\n            .then(response => response.json())\n            .then(body => {\n                let response: Array<PredictionResponse> = new Array<PredictionResponse>();\n                body['ctatt']['eta'].forEach((prediction: { [x: string]: string; }) => {\n                    let mins = (Date.parse(prediction['arrT']) - Date.parse(prediction['prdt'])) / (60 * 1000);\n                    let line = PredictionLine.Unknown;\n                    if (prediction['rt'] === 'P') {\n                        line = PredictionLine.Purple;\n                    }\n                    else if (prediction['rt'] === 'Brn') {\n                        line = PredictionLine.Brown;\n                    }\n                    else if (prediction['rt'] === 'Red') {\n                        line = PredictionLine.Red;\n                    }\n                    response.push(new PredictionResponse(prediction['staNm'], prediction['destNm'],\n                        line, mins));\n                    resolve(response);\n                });\n            });\n        });\n    }\n}","import React, { Component } from 'react';\nimport PredictionResponse, {PredictionLine} from '../api/PredictionResponse';\n\nexport default class BusArrivalRow extends Component<{predictionResponse: PredictionResponse}, {}> {\n    render() {\n        let mins = this.props.predictionResponse.Prediction !== null ? this.props.predictionResponse.Prediction + ' mins' : 'DUE';\n        return (\n            <div className=\"arrival\" style={{background: this.getcolor(this.props.predictionResponse.Line)}}>\n                <li className=\"arrival-detail arrival-destination\">{this.props.predictionResponse.Destination}</li> <li className=\"arrival-detail arrival-mins\">{mins}</li>\n            </div>\n        );\n    }\n\n    private getcolor(line: PredictionLine) {\n        switch (line) {\n            case PredictionLine.Purple:\n                return 'Purple';\n            case PredictionLine.Brown:\n                return 'Sienna';\n            case PredictionLine.Red:\n                return 'Crimson';\n            case PredictionLine.Bus:\n                return 'Gray';\n            default:\n                return 'Black';\n        }\n    }\n}","import React, { Component } from 'react';\nimport BusTrackerApi from '../api/BusTrackerApi';\nimport TrainApi from '../api/TrainApi';\nimport PredictionResponse from '../api/PredictionResponse';\nimport BusArrivalRow from './BusArrivalRow';\n\nexport default class Arrivals extends Component<{dataIndex: number}, {isFetching: boolean, predictionResponses: PredictionResponse[]}> {\n    timer: number;\n    constructor(props: any) {\n        super(props);\n        this.timer = 0;\n        this.state = {\n            isFetching: false,\n            predictionResponses: new Array<PredictionResponse>()\n        }\n    }\n\n    render() {\n        const allResponseData = new Array<Array<any>>();\n        let responseData = new Array<any>();\n        for (var [idx, response] of this.state.predictionResponses.entries()) {\n            if (idx % 4 === 0 && idx !== 0) {\n                allResponseData.push(responseData);\n                responseData = new Array<any>();\n            }\n            responseData.push(<BusArrivalRow key={idx} predictionResponse={response}></BusArrivalRow>)\n        };\n        const allRespIdx = this.props.dataIndex % allResponseData.length;\n        return (<ul className=\"arrivals-container\">{allResponseData[allRespIdx]}</ul>);\n    }\n\n    componentDidMount() {\n        this.fetchData();\n        this.timer = setInterval(() => this.fetchData(), 30 * 1000);\n    }\n\n    async fetchData() {\n        this.setState({...this.state, isFetching: true});\n        await Promise.all([\n            BusTrackerApi.getPredictions([1345, 1227]),\n            TrainApi.getPredictions([30233, 30236, 30235, 30234])\n        ]).then(resp => {\n            let allData = resp[0].concat(resp[1]);\n            allData.sort((a, b) => {\n                if (a.Prediction == null || b.Prediction == null || a.Prediction < b.Prediction) {\n                    return -1;\n                }\n                return 1;\n            });\n            this.setState({...this.state, isFetching: false, predictionResponses: allData});\n        }).catch(reason => {\n            console.log('Error fetching: ' + reason);\n            this.setState({...this.state, isFetching: false});\n        });        \n    }\n}","export default class WeatherResponse {\n    Forecasts: Array<Forecast>;\n\n    constructor(forecasts: Array<Forecast>,) {\n        this.Forecasts = forecasts;\n    }\n}\n\n\nexport class Forecast {\n    TimePeriodName: string;\n    Temperature: number;\n    DetailedForecast: string;\n    ShortForecast: string;\n    IconUrl: string;\n\n    constructor(timePeriodName: string, temperature: number, shortForecast: string, detailedForecast: string,\n        iconUrl: string) {\n        this.TimePeriodName = timePeriodName;\n        this.Temperature = temperature;\n        this.ShortForecast = shortForecast; \n        this.DetailedForecast = detailedForecast;\n        this.IconUrl = iconUrl;\n    }\n}","import WeatherResponse, { Forecast } from './WeatherResponse';\nimport FetchProxy from './FetchProxy';\n\nexport default class WeatherApi {\n    public static getWeather(lotXValue: number, lotYValue: number) : Promise<WeatherResponse> {\n        return new Promise(resolve => {\n            let idsString: string = lotXValue + ',' + lotYValue;\n            let url: string = `https://api.weather.gov/gridpoints/LOT/${idsString}/forecast`;\n            FetchProxy.fetchViaProxy(url)\n            .then(response => response.json())\n            .then(body => {\n                let response = new Array<Forecast>();\n                body['properties']['periods'].forEach((period: { [x: string]: string; }) => {\n                    let forecast = new Forecast(period['name'], Number.parseFloat(period['temperature']),\n                    period['shortForecast'], period['detailedForecast'], period['icon'])\n                    response.push(forecast);\n                });\n                resolve(new WeatherResponse(response));\n            });\n        });\n    }\n}","import React, { Component } from 'react';\nimport WeatherApi from '../api/WeatherApi';\nimport WeatherResponse, { Forecast } from '../api/WeatherResponse';\n\nexport default class Weather extends Component<{}, {isFetching: boolean, forecasts: Array<Forecast>}> {\n    timer: number;\n    constructor(props: any) {\n        super(props);\n        this.timer = 0;\n        this.state = {\n            isFetching: false,\n            forecasts: new Array<Forecast>()\n        }\n    }\n\n    render() {\n        return <div>{this.state.forecasts.length > 0 ? this.state.forecasts[0].DetailedForecast : 'no forecasts'}</div>;\n    }\n\n    componentDidMount() {\n        this.fetchData();\n        this.timer = setInterval(() => this.fetchData(), 30 * 1000);\n    }\n\n    async fetchData() {\n        this.setState({\n            isFetching: true\n        })\n        WeatherApi.getWeather(73, 70).then((response: WeatherResponse) => {\n            this.setState({forecasts: response.Forecasts});\n        });\n        this.setState({\n            isFetching: false\n        })\n    }\n}","import React, { Component } from 'react';\nimport Arrivals from './Arrivals';\nimport Weather from './Weather';\n\nexport default class Dashboard extends Component<{}, {arrivalsDataIndex: number, transitionState: number}> {\n    timer: number;\n    transitionStates = ['Arrival0', 'Arrival1', 'Arrival2', 'Weather'];\n    constructor(props: any) {\n        super(props);\n        this.timer = 0;\n        this.state = {\n            arrivalsDataIndex: 0,\n            transitionState: 0\n        }\n    }\n\n    render() {\n        let state = this.transitionStates[this.state.transitionState];\n        if (state.startsWith('Arrival')) {\n            return <Arrivals dataIndex={this.state.arrivalsDataIndex} />\n        }\n        else if (state === 'Weather') {\n            return <Weather />\n        }\n    }\n\n    update() {\n        let newState = this.transitionStates[(this.state.transitionState + 1) % this.transitionStates.length];\n        if (newState.startsWith('Arrival')) {\n            this.setState({\n                arrivalsDataIndex: Number.parseInt(newState.split('Arrival')[1]),\n                transitionState: (this.state.transitionState + 1) % this.transitionStates.length\n            });\n        }\n        else {\n            this.setState({\n                transitionState: (this.state.transitionState + 1) % this.transitionStates.length\n            });\n        }\n    }\n\n    componentDidMount() {\n        this.timer = setInterval(() => this.update(), 10 * 1000);\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}